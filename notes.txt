import React, { useState } from 'react';
import { useMenu } from "../context/MenuContext";
import Image from "next/image";
import Link from "next/link";
import Head from "next/head";
import { motion, AnimatePresence } from 'framer-motion';

import styles from "../styles/index.module.scss";

const Kitchen = () => {
  const { kitchenOrders, removeFromKitchen } = useMenu();
  const [selectedSection, setSelectedSection] = useState('');

  const sections = Array.from({ length: 14 }, (_, i) => (i + 1).toString());

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1 }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  return (
    <>
      <Head>
        <title>Kitchen Orders</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <h1>Kitchen Orders</h1>
      <main className={styles.kitchenContainer}>
        <section>
          {sections.map((section) => (
            <motion.button
              key={section}
              onClick={() => setSelectedSection(section)}
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              Mesa {section}
            </motion.button>
          ))}
        </section>
        <AnimatePresence>
          {selectedSection && (
            <motion.div
              key={selectedSection}
              variants={containerVariants}
              initial="hidden"
              animate="visible"
              exit="hidden"
              className={styles.itemsContainer}
            >
              {kitchenOrders[selectedSection] && kitchenOrders[selectedSection].length > 0 ? (
                kitchenOrders[selectedSection].map((order, index) => (
                  <motion.div key={index} variants={itemVariants} className={styles.items}>
                    <h2>Order Number: {order.orderNumber}</h2>
                    {order.items.map((item, itemIndex) => (
                      <div key={itemIndex}>
                        <p>{item.name}</p>
                        <p>Quantity: {item.quantity}</p>
                      </div>
                    ))}
                    <button onClick={() => removeFromKitchen(order.orderNumber)}>Remove Order</button>
                  </motion.div>
                ))
              ) : (
                <p>No hay Ã­tems en el momento.</p>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </main>
      <Link href={"/"}>Menu</Link>
    </>
  );
};

export default Kitchen;

import React, { createContext, useContext, useState, useEffect } from 'react';

const MenuContext = createContext();

export const useMenu = () => {
  const context = useContext(MenuContext);
  if (!context) {
    throw new Error("useMenu must be used within a MenuProvider");
  }
  return context;
};

export const MenuProvider = ({ children }) => {
  const [menuItems, setMenuItems] = useState([]);
  const [orderItems, setOrderItems] = useState([]);
  const [kitchenOrders, setKitchenOrders] = useState({});

  useEffect(() => {
    const storedMenuItems = localStorage.getItem('menuItems');
    if (storedMenuItems) {
      setMenuItems(JSON.parse(storedMenuItems));
    }
    const storedOrderItems = localStorage.getItem('orderItems');
    if (storedOrderItems) {
      setOrderItems(JSON.parse(storedOrderItems));
    }
    const storedKitchenOrders = localStorage.getItem('kitchenOrders');
    if (storedKitchenOrders) {
      setKitchenOrders(JSON.parse(storedKitchenOrders));
    }
  }, []);

  const addToMenu = (item) => {
    const existingItemIndex = menuItems.findIndex(
      (menuItem) => menuItem.id === item.id && menuItem.origin === item.origin
    );

    if (existingItemIndex !== -1) {
      const updatedMenu = [...menuItems];
      updatedMenu[existingItemIndex].quantity += item.quantity;
      setMenuItems(updatedMenu);
      localStorage.setItem('menuItems', JSON.stringify(updatedMenu));
    } else {
      const updatedMenu = [...menuItems, item];
      setMenuItems(updatedMenu);
      localStorage.setItem('menuItems', JSON.stringify(updatedMenu));
    }
  };

  const removeFromMenu = (item) => {
    const updatedMenu = menuItems.filter(
      (menuItem) => !(menuItem.id === item.id && menuItem.origin === item.origin)
    );
    setMenuItems(updatedMenu);
    localStorage.setItem('menuItems', JSON.stringify(updatedMenu));
  };

  const addToOrder = (item) => {
    const existingItemIndex = orderItems.findIndex(
      (orderItem) => orderItem.id === item.id
    );

    if (existingItemIndex !== -1) {
      const updatedOrders = [...orderItems];
      updatedOrders[existingItemIndex].quantity += 1;
      setOrderItems(updatedOrders);
      localStorage.setItem('orderItems', JSON.stringify(updatedOrders));
    } else {
      const updatedOrders = [...orderItems, { ...item, quantity: 1 }];
      setOrderItems(updatedOrders);
      localStorage.setItem('orderItems', JSON.stringify(updatedOrders));
    }
  };

  const removeFromOrder = (item) => {
    const existingItemIndex = orderItems.findIndex(
      (orderItem) => orderItem.id === item.id
    );

    if (existingItemIndex !== -1) {
      const updatedOrders = [...orderItems];
      if (updatedOrders[existingItemIndex].quantity > 1) {
        updatedOrders[existingItemIndex].quantity -= 1;
      } else {
        updatedOrders.splice(existingItemIndex, 1);
      }
      setOrderItems(updatedOrders);
      localStorage.setItem('orderItems', JSON.stringify(updatedOrders));
    }
  };

  const addToKitchen = (orderNumber) => {
    const newOrder = {
      orderNumber,
      items: [...orderItems],
    };
    const updatedKitchenOrders = { ...kitchenOrders };
    if (!Array.isArray(updatedKitchenOrders[orderNumber])) {
      updatedKitchenOrders[orderNumber] = [];
    }
    updatedKitchenOrders[orderNumber].push(newOrder);
    setKitchenOrders(updatedKitchenOrders);
    localStorage.setItem('kitchenOrders', JSON.stringify(updatedKitchenOrders));
    setOrderItems([]);
    localStorage.removeItem('orderItems');
  };

  const removeFromKitchen = (orderNumber) => {
    const updatedKitchenOrders = { ...kitchenOrders };
    if (updatedKitchenOrders[orderNumber]) {
      delete updatedKitchenOrders[orderNumber];
      setKitchenOrders(updatedKitchenOrders);
      localStorage.setItem('kitchenOrders', JSON.stringify(updatedKitchenOrders));
    }
  };

  const menuCount = menuItems.length;

  return (
    <MenuContext.Provider value={{ menuItems, addToMenu, removeFromMenu, addToOrder, removeFromOrder, orderItems, menuCount, addToKitchen, kitchenOrders, removeFromKitchen  }}>
      {children}
    </MenuContext.Provider>
  );
};

mi mi boton de removefromKitchen borra todas las ordenes y yto quiero solo elimine la orden selecioanda en vez de todas las ordenes me puedes ayudar con eso